Sandstorm:
  NeosH5P:
    # This is where H5P content will be reachable from outside. You usually do not have to change anything here.
    h5pPublicFolder:
      # URL of the h5p public folder. Can be absolute or relative to the base Uri.
      url: &h5pPublicFolderUrl '/_Resources/Static/H5P/'
      # File path of the h5p public folder.
      path: &h5pPublicFolderPath '%FLOW_PATH_WEB%/_Resources/Static/H5P/'
      subfolders:
        # subfolder for content. Must be named "content" for now, because H5P expects this.
        content: &h5pContentSubfolderName 'content'
        # subfolder for libraries. Must be named "libraries" for now, because H5P expects this.
        libraries: &h5pLibrarySubfolderName 'libraries'
        # Directory where the H5P core assets (from 3rd party package) are published to.
        core: &h5pCoreSubfolderName 'h5p-core'
        # Directory where the H5P editor assets (from 3rd party package) are published to.
        editor: &h5pEditorSubfolderName 'h5p-editor'
        # Directory where temporary editor files are put.
        editorTempfiles: &h5pEditorTempfilesSubfolderName 'editor-temp'

    # These can be generated as ConfigSettings by the flow command ./flow h5p:generateconfig.
    # Adapt these to your needs and re-run the command if you changed anything.
    configSettings:
      # if TRUE, sends usage statistics (#contents, #authors, #librs, etc) to H5P Hub
      # with every content type cache refresh. Not implemented yet!
      send_usage_statistics: false
      # if TRUE, saves ContentResults for logged-in users. These can be seen in the H5P backend.
      track_user: true
      # if TRUE, saves ContentUserData for logged-in users. This saves data that a frontend user
      # enters during his work with a content, and will restore content state on page reloads.
      save_content_state: true
      # interval in seconds for which the ContentUserData is saved
      save_content_frequency: 2
      # whether or not the H5P hub is enabled. Should always be TRUE.
      hub_is_enabled: true
      # Enables LRS content types. Set to true if you integrated an LRS.
      enable_lrs_content_types: false
      # content display options - controls the frame under each H5P content element.
      frame: true
      export: true
      embed: true
      copyright: true
      icon: true

    # These are the xAPI integration settings. Find out more about H5P and xAPI here:
    # https://h5p.org/documentation/x-api
    # If you do not need xAPI, set this to an empty array: "xAPI: []"
    xAPI:
      # Set to TRUE to log all xAPI statements to the console.
      debugMode: false
      # Set this to a script path that should be loaded in the xAPI scope.
      # Replace this with your custom xAPI integration script.
      integrationScript: 'resource://Sandstorm.NeosH5P/Public/Scripts/xAPIExample.js'
      # These settings will be forwarded to your integration script and will be available on the window under
      # window.NeosH5PxAPI.
      # "yourLRSEndpoint" is just an example that is used in our example xAPI integration
      # script. You can configure anything you want here, and remove "yourLRSEndpoint".
      integrationSettings:
        yourLRSEndpoint: 'http://example.com'

    # Setting for the H5PCore->aggregateAssets switch. If set to TRUE, H5P triggers the generation of
    # aggregated assets (CachedAsset) for each content element. This improves page load times, so should
    # be true unless you have a good reason.
    aggregateAssets: true
    # Set to true to enable the export functionality. This only controls the generation of export files.
    # To make them available for download, you have to enable the "export" config setting above.
    enableExport: true

Neos:
  Neos:
    modules:
      'h5p':
        label: 'H5P Rich Content'
        controller: 'Sandstorm\NeosH5P\Controller\Backend\MainController'
        description: 'Contains modules for managing H5P objects.'
        icon: icon-flash
        submodules:
          content:
            label: 'H5P Content'
            controller: 'Sandstorm\NeosH5P\Controller\Backend\ContentController'
            description: 'Create, edit and manage H5P content elements.'
            icon: icon-check-square
            actions:
              new:
                label: 'New H5P Content'
                title: 'Create new H5P content element'
          library:
            label: 'H5P Libraries'
            controller: 'Sandstorm\NeosH5P\Controller\Backend\LibraryController'
            description: 'Manage H5P libraries, get upgraded versions, and update the H5P hub cache.'
            icon: icon-book
          results:
            label: 'H5P User Results'
            controller: 'Sandstorm\NeosH5P\Controller\Backend\ContentResultsController'
            description: 'View and delete user results for H5P content elements.'
            icon: icon-flag-checkered
          administration:
            label: 'H5P Administration'
            controller: 'Sandstorm\NeosH5P\Controller\Backend\AdministrationController'
            description: 'Make administrative settings for H5P.'
            icon: icon-cogs

    Ui:
      resources:
        javascript:
          'Sandstorm.NeosH5P:ContentPickerEditor':
            resource: resource://Sandstorm.NeosH5P/Public/ContentPickerEditor/Plugin.js

    fusion:
      autoInclude:
        Sandstorm.NeosH5P: true

  Flow:
    # We add a request pattern for our controllers to the Neos Backend provider,
    # so that XHR requests that go directly to these controllers (and not through
    # a ModuleController subrequest) can be authenticated as well
    security:
      authentication:
        providers:
          'Neos.Neos:Backend':
            requestPatterns:
              'Sandstorm.NeosH5P:BackendControllers':
                pattern: 'ControllerObjectName'
                patternOptions:
                  controllerObjectNamePattern: 'Sandstorm\NeosH5P\Controller\Backend\.*'


    # We need the tag "@variable" as an ignored annotation, because otherwise parsing of the
    # H5PFrameworkInterface causes a reflection error
    reflection:
      ignoredTags:
        'variable': true

    mvc:
      routes:
        'Sandstorm.NeosH5P':
          position: 'start'

    resource:
      storages:
        h5pContentStorage:
          storage: 'Sandstorm\NeosH5P\Resource\Storage\ExtractedContentStorage'
          storageOptions:
            publishingSubfolder: *h5pContentSubfolderName
            resourceGetterMethod: 'getZippedContentFile'
            itemFolderNameMethod: 'getContentId'
        h5pLibraryStorage:
          storage: 'Sandstorm\NeosH5P\Resource\Storage\ExtractedLibraryStorage'
          storageOptions:
            publishingSubfolder: *h5pLibrarySubfolderName
            resourceGetterMethod: 'getZippedLibraryFile'
            itemFolderNameMethod: 'getFolderName'
        h5pCoreStorage:
          storage: 'Sandstorm\NeosH5P\Resource\Storage\H5PPackageFileStorage'
          storageOptions:
            path: '%FLOW_PATH_PACKAGES%Libraries/h5p/'
            library: *h5pCoreSubfolderName
            subfolders:
              - 'fonts'
              - 'images'
              - 'js'
              - 'styles'
        h5pEditorStorage:
          storage: 'Sandstorm\NeosH5P\Resource\Storage\H5PPackageFileStorage'
          storageOptions:
            path: '%FLOW_PATH_PACKAGES%Libraries/h5p/'
            library: *h5pEditorSubfolderName
            subfolders:
              - 'ckeditor'
              - 'images'
              - 'language'
              - 'libs'
              - 'scripts'
              - 'styles'
        h5pEditorTempfilesStorage:
          storage: 'Sandstorm\NeosH5P\Resource\Storage\EditorTempfileStorage'
          storageOptions:
            publishingSubfolder: *h5pEditorTempfilesSubfolderName

      collections:
        h5p-content:
          storage: 'h5pContentStorage'
          target: 'h5pTarget'
        h5p-libraries:
          storage: 'h5pLibraryStorage'
          target: 'h5pTarget'
        h5p-core-files:
          storage: 'h5pCoreStorage'
          target: 'h5pTarget'
        h5p-editor-files:
          storage: 'h5pEditorStorage'
          target: 'h5pTarget'
        h5p-editor-tempfiles:
          storage: 'h5pEditorTempfilesStorage'
          target: 'h5pTarget'

      targets:
        h5pTarget:
          target: 'Neos\Flow\ResourceManagement\Target\FileSystemTarget'
          targetOptions:
            path: *h5pPublicFolderPath
            baseUri: *h5pPublicFolderUrl
            subdivideHashPathSegment: false

        # !!! the H5P Plugin only works with URLs like /_Resources/Persistent/294da7a7be7d18d4a0127cbbb685229960f93d48/76c5ee3b2d5c5f5510b2fd562211a05353555ef2.css
        # !!! instead of /_Resources/Persistent/2/9/4/d/294da7a7be7d18d4a0127cbbb685229960f93d48/76c5ee3b2d5c5f5510b2fd562211a05353555ef2.css
        # !!! so subdivideHashPathSegment must be OFF
        localWebDirectoryPersistentResourcesTarget:
          targetOptions:
            subdivideHashPathSegment: false
